<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>for testing</title>
  
  <subtitle>by noor</subtitle>
  <link href="http://evil-must.github.io/atom.xml" rel="self"/>
  
  <link href="http://evil-must.github.io/"/>
  <updated>2020-12-02T03:36:07.488Z</updated>
  <id>http://evil-must.github.io/</id>
  
  <author>
    <name>noor</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lab2：内存管理</title>
    <link href="http://evil-must.github.io/2020/12/02/lab2/"/>
    <id>http://evil-must.github.io/2020/12/02/lab2/</id>
    <published>2020-12-02T03:27:12.000Z</published>
    <updated>2020-12-02T03:36:07.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>为操作系统编写内存管理代码。内存管理包含两个组件。</p><p>第一个组件是内核的 <em>物理内存分配器</em>，以便内核可以分配和释放内存。分配器以 4096 字节为单位操作，称为 <em>pages</em>。任务是维护数据结构，该数据结构记录哪些物理页是空闲的，哪些已分配的，以及有多少个进程共享每个分配的页。还将编写例程来分配和释放内存页面。</p><p>内存管理的第二个组件是 <em>虚拟内存</em>，它将内核和用户软件使用的虚拟地址映射到物理内存中的地址。当指令使用内存时，x86 硬件的内存管理单元（MMU）执行映射。根据提供的规范修改 JOS 以设置 MMU 的页表。</p><a id="more"></a><h2 id="Part-1：Physical-Page-Management"><a href="#Part-1：Physical-Page-Management" class="headerlink" title="Part 1：Physical Page Management"></a>Part 1：Physical Page Management</h2><p>操作系统必须跟踪物理 RAM 的使用情况。JOS 以页为粒度管理 PC 的物理内存，这样它就可以使用 MMU 来映射和保护分配的每一块内存。</p><p>编写一个物理页分配器。它通过 struct PageInfo 对象的链接列表来跟踪那些页面是空闲的，每个对象对应一个物理页面。</p><p>在编写剩余的虚拟内存实现之前，需要先编写物理页分配器，因为页表管理代码将需要分配用于存储页表的物理内存。</p><h4 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1."></a>Exercise 1.</h4><p>实现 kern/pmap.c 中以下几个函数，用 <code>check_page_free_list()</code> 和 <code>check_page_alloc()</code> 检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boot_alloc()</span><br><span class="line">mem_init()</span><br><span class="line">page_init()</span><br><span class="line">page_alloc()</span><br><span class="line">page_free()</span><br></pre></td></tr></table></figure><h4 id="boot-alloc"><a href="#boot-alloc" class="headerlink" title="boot_alloc()"></a>boot_alloc()</h4><p>此简单的物理内存分配器仅在 JOS 设置其虚拟内存系统时使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LAB 2: Your code here.</span></span><br><span class="line">result = nextfree;</span><br><span class="line">nextfree = ROUNDUP(nextfree + n, PGSIZE);</span><br><span class="line">cprintf(<span class="string">&quot;boot_alloc is succeed, nextfree is %x\n&quot;</span>, nextfree);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h4 id="mem-init"><a href="#mem-init" class="headerlink" title="mem_init()"></a>mem_init()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">mem_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> cr0;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//探测内存大小</span></span><br><span class="line">    i386_detect_memory();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建初始页目录</span></span><br><span class="line">    kern_pgdir = (<span class="keyword">pde_t</span> *) boot_alloc(PGSIZE);</span><br><span class="line"><span class="built_in">memset</span>(kern_pgdir, <span class="number">0</span>, PGSIZE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分配一组 npages 数量的 PageInfo 结构，并将其储存在</span></span><br><span class="line">    <span class="comment">//pages 中。内核使用这个数组跟踪物理页：每一个物理页，在这个</span></span><br><span class="line">    <span class="comment">//数组中都有一个相关的 PageInfo 结构。&#x27;npages&#x27;代表内存中物</span></span><br><span class="line">    <span class="comment">//理页的数量。使用 memset 将每一个 PageInfo 结构中的所有域</span></span><br><span class="line">    <span class="comment">//都初始化为 0。</span></span><br><span class="line">    <span class="comment">//Your code goes here:</span></span><br><span class="line">    pages = (struct PageInfo*) boot_alloc(<span class="keyword">sizeof</span>(struct PageInfo) * npages);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//现在已经分配了初始的内核数据结构，接着设置空闲物理页的列表。</span></span><br><span class="line">    <span class="comment">//一旦实现，此后的内存管理都需要通过 page_* 函数。而且，我们</span></span><br><span class="line">    <span class="comment">//现在可以使用 boot_map_region 或 page_insert 实现内存映</span></span><br><span class="line">    <span class="comment">//射。</span></span><br><span class="line">    page_init();</span><br><span class="line"></span><br><span class="line">check_page_free_list(<span class="number">1</span>);</span><br><span class="line">check_page_alloc();</span><br><span class="line">check_page();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="page-init"><a href="#page-init" class="headerlink" title="page_init()"></a>page_init()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化页结构和可用内存列表。</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">page_init(<span class="keyword">void</span>)&#123;</span><br><span class="line"><span class="comment">//按照以下要求标记物理页</span></span><br><span class="line"><span class="comment">// 1）将物理页 0 标记为使用中。不放入空闲列表即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2）余下的基本内存标记为空闲，[PGSIZE, npages_basemem *</span></span><br><span class="line">    <span class="comment">//PGSIZE)</span></span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; npages_basemem; i++) &#123;</span><br><span class="line">pages[i].pp_ref = <span class="number">0</span>;</span><br><span class="line">pages[i].pp_link = page_free_list;</span><br><span class="line">page_free_list = &amp;pages[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 3）IO hole [IOPHYSMEM, EXTPHYSMEM)，不能被分配。</span></span><br><span class="line"><span class="comment">// 4) Then extended memory [EXTPHYSMEM, ...)。除去物理</span></span><br><span class="line"><span class="comment">//内存中,内核，页表以及其他数据结构占据的页之外，其他的标记为空</span></span><br><span class="line"><span class="comment">//闲页。</span></span><br><span class="line"><span class="keyword">char</span> *nextfree = boot_alloc(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">size_t</span> kern_end_page = PGNUM(PADDR(nextfree));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = kern_end_page; i &lt; npages; i++) &#123;</span><br><span class="line">        pages[i].pp_ref = <span class="number">0</span>;</span><br><span class="line">        pages[i].pp_link = page_free_list;</span><br><span class="line">        page_free_list = &amp;pages[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="page-alloc"><a href="#page-alloc" class="headerlink" title="page_alloc()"></a>page_alloc()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配一个物理页。If(alloc_flags &amp; ALLOC_ZERO)，用&quot;0&quot;字节填充整</span></span><br><span class="line"><span class="comment">//个返回的物理页面。</span></span><br><span class="line"><span class="comment">//设置已分配页的 pp_link 为 NULL。</span></span><br><span class="line"><span class="comment">//内存不足时返回 NULL。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>*</span></span><br><span class="line"><span class="class"><span class="title">page_alloc</span>(<span class="title">int</span> <span class="title">alloc_flags</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (!page_free_list) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">pp</span>;</span></span><br><span class="line">    pp = page_free_list;</span><br><span class="line">    page_free_list = page_free_list-&gt;pp_link;</span><br><span class="line">    pp-&gt;pp_link = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (alloc_flags &amp; ALLOC_ZERO) &#123;</span><br><span class="line">        <span class="keyword">void</span>* va = page2kva(pp);</span><br><span class="line">        <span class="built_in">memset</span>(va, <span class="string">&#x27;\0&#x27;</span>, PGSIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="page-free"><a href="#page-free" class="headerlink" title="page_free()"></a>page_free()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一页到空闲列表。</span></span><br><span class="line"><span class="comment">//此函数仅在 pp-&gt;pp_ref 为 0 时被调用。</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">page_free(struct PageInfo *pp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果 pp-&gt;pp_ref 非零或 pp-&gt;pp_link 非空，panic。</span></span><br><span class="line">    <span class="keyword">if</span> (pp-&gt;pp_ref || pp-&gt;pp_link) &#123;</span><br><span class="line">        panic(<span class="string">&quot;This page is using!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pp-&gt;pp_link = page_free_list;</span><br><span class="line">    page_free_list = pp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Part-2-Virtual-Memory"><a href="#Part-2-Virtual-Memory" class="headerlink" title="Part 2: Virtual Memory"></a>Part 2: Virtual Memory</h2><p>熟悉 x86 的保护模式内存管理架构：分段和页面转换。</p><h3 id="Virtual-Linear-and-Physical-Addresses"><a href="#Virtual-Linear-and-Physical-Addresses" class="headerlink" title="Virtual, Linear, and Physical Addresses"></a>Virtual, Linear, and Physical Addresses</h3><p>在 x86 术语中，虚拟地址由段选择器和段内偏移组成。线性地址是段翻译后，页面翻译之前获得的地址。物理地址是在段翻译和页面翻译之后最终得到的地址。</p><p><img src="C:\Users\dier\Pictures\QQ截图20200715191038.png"></p><h4 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2."></a>Exercise 2.</h4><blockquote><p>阅读 <a href="../../readings/i386/toc.html">Intel 80386 Reference Manual</a>。仔细阅读有关页面转换和基于页面的保护的部分（5.2和6.4）。</p></blockquote><h4 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3."></a>Exercise 3.</h4><blockquote><p>进入 QEMU 的 Monitor ，练习使用 QEMU 的 info pg/mem 等命令。</p></blockquote><p>从 CPU 上执行的代码开始，一旦我们进入保护模式，就无法直接使用线性地址或物理地址。所有内存引用都解释为虚拟地址，并由 MMU 翻译，这意味着 C 中的所有指针都是虚拟地址。</p><p>JOS 内核通常需要将地址作为不透明值或整数进行操作，而不取消引用它们，例如在物理内存分配器中。有时这些是虚拟地址，有时是物理地址。为了帮助记录代码，JOS 源区分了两种情况：<code>uintptr_t</code> 表示虚拟地址，<code>physaddr_t</code> 表示物理地址。</p><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol><li>判断变量 x 的类型，uinptr_t 还是 physaddr_t。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mystery_t x;</span><br><span class="line">char* value &#x3D; return_a_pointer();</span><br><span class="line">*value &#x3D; 10;</span><br><span class="line">x &#x3D; (mystery_t) value;</span><br></pre></td></tr></table></figure><h3 id="Reference-counting"><a href="#Reference-counting" class="headerlink" title="Reference counting"></a>Reference counting</h3><p>在将来的 lab 中，您通常会同时在多个虚拟地址（或在多个环境的地址空间）上映射相同的物理页面。你将在物理页的 PageInfo 结构的 pp_ref 字段保存对该页面的引用计数。当物理页的此计数为零时，可以释放该页，因为它不再使用。通常，此计数应等于物理页面在所有页表中显示在 UTOP 下方的次数（Utop 上面的映射大多由内核在启动时设置， 不应被释放， 因此无需对它们引用计数）。我们还将使用它来跟踪我们保留到页目录页的指针数，进而跟踪页目录对页表页引用的数量。</p><p>使用 page_alloc 应当小心。它返回页面的引用计数始终为 0 ，所以一旦对返回的页面做了一些事情，pp_ref 应当递增（比如将之插入页表）。有时这会被其他函数（page_insert）解决，有时被 page_alloc 直接执行。</p><h3 id="Page-Table-Management"><a href="#Page-Table-Management" class="headerlink" title="Page Table Management"></a>Page Table Management</h3><p>现在，您将编写一组例程来管理页表：插入和删除线性地址到物理地址的映射，并根据需要创建页表页。</p><h4 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise 4."></a>Exercise 4.</h4><p>实现 kern/pmap.c 中以下几个函数，用 <code>check_page()</code> 检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pgdir_walk()</span><br><span class="line">boot_map_region()</span><br><span class="line">page_lookup()</span><br><span class="line">page_remove()</span><br><span class="line">page_insert()</span><br></pre></td></tr></table></figure><h4 id="pgdir-walk"><a href="#pgdir-walk" class="headerlink" title="pgdir_walk()"></a>pgdir_walk()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x27;pgdir&#x27;是指向页目录的指针，pgdir_walk 返回一个指针指向线性地址</span></span><br><span class="line"><span class="comment">//&#x27;va&#x27; 指代的页表条目（PTE）。这需要访问二级页表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但相关的页表页可能不存在。</span></span><br><span class="line"><span class="comment">//如果为真，并且 create == false，那么返回 NULL。</span></span><br><span class="line"><span class="comment">//否则，pgdir_walk 使用 page_alloc 分配一张新页表页。</span></span><br><span class="line"><span class="comment">// -如何分配失败，返回NULL；</span></span><br><span class="line"><span class="comment">// -否则，新页面的引用计数递增，页面清除，并且 pgdir_walk 返回一</span></span><br><span class="line"><span class="comment">//个指针指向新的页表页。</span></span><br><span class="line"><span class="comment">//提示 1：使用 kern/pmap.h 中的 page2pa() 可以将一个 </span></span><br><span class="line"><span class="comment">//PageInfo* 转换为页面的物理地址。</span></span><br><span class="line"><span class="comment">//提示 2：x86 MMU 检查页目录和页表中的权限位，因此在页目录中</span></span><br><span class="line"><span class="comment">//保留权限比严格要求的权限更宽松是安全的。</span></span><br><span class="line"><span class="keyword">pte_t</span> *</span><br><span class="line">pgdir_walk(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">const</span> <span class="keyword">void</span> *va, <span class="keyword">int</span> create)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> pdx = PDX(va);</span><br><span class="line"><span class="keyword">uint32_t</span> ptx = PTX(va);</span><br><span class="line">    <span class="keyword">pde_t</span> *pde; </span><br><span class="line">pde = &amp;pgdir[pdx];</span><br><span class="line">    <span class="keyword">pde_t</span> *pte;</span><br><span class="line">    <span class="keyword">if</span> (*pde &amp; PTE_P) &#123;</span><br><span class="line">        pte = KADDR(PTE_ADDR(*pde));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (create) &#123;</span><br><span class="line">        struct PageInfo* pp = page_alloc(ALLOC_ZERO);</span><br><span class="line">            <span class="keyword">if</span> (!pp) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">pp-&gt;pp_ref++;</span><br><span class="line">pte = page2kva(pp);</span><br><span class="line">*pde = page2pa(pp) | PTE_P | PTE_U | PTE_W;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;pte[ptx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="boot-map-region"><a href="#boot-map-region" class="headerlink" title="boot_map_region()"></a>boot_map_region()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将虚拟地址空间的[va，va+size）映射到以 pgdir 为根的页表中的物理</span></span><br><span class="line"><span class="comment">// 地址[pa，pa+size]。Size 是 PGSIZE 的倍数，va 和 pa 都是页对</span></span><br><span class="line"><span class="comment">// 齐的。</span></span><br><span class="line"><span class="comment">// 条目权限位 perm | PTE_P。</span></span><br><span class="line"><span class="comment">// 此函数只用于在UTOP上设置“static”映射。因此，它不应该更改映</span></span><br><span class="line"><span class="comment">// 射页上的 pp_ref 字段。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="page-lookup"><a href="#page-lookup" class="headerlink" title="page_lookup()"></a>page_lookup()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回虚拟地址 &#x27;va&#x27; 映射的页面。</span></span><br><span class="line"><span class="comment">//If pte_store 不为 0，那么就把这个页面的 pte 地址储存在</span></span><br><span class="line"><span class="comment">//pte_store 中。</span></span><br><span class="line"><span class="comment">//返回 NULL，如果地址 va 没有映射页面。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>*</span></span><br><span class="line"><span class="class"><span class="title">page_lookup</span>(<span class="title">pde_t</span> *<span class="title">pgdir</span>, <span class="title">void</span> *<span class="title">va</span>, <span class="title">pte_t</span> **<span class="title">pte_store</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">pp</span>;</span></span><br><span class="line">    <span class="keyword">pte_t</span> *pte;</span><br><span class="line">    pte = pgdir_walk(pgdir, va, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pte) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pte_store) &#123;</span><br><span class="line">            *pte_store = pte;</span><br><span class="line">        &#125;</span><br><span class="line">        pp = pa2page(PTE_ADDR(*pte));</span><br><span class="line">        <span class="keyword">return</span> pp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="page-remove"><a href="#page-remove" class="headerlink" title="page_remove()"></a>page_remove()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消虚拟地址 &#x27;va&#x27; 处物理页的映射。</span></span><br><span class="line"><span class="comment">//如果该地址处没有物理页，则什么也不做。</span></span><br><span class="line"><span class="comment">//Details：</span></span><br><span class="line"><span class="comment">//-物理页的 ref 应当递减;</span></span><br><span class="line"><span class="comment">//-若 ref 减为零则应当释放物理页;</span></span><br><span class="line"><span class="comment">//-若 &#x27;va&#x27; 对应的 PTE 存在则应当设为 0;</span></span><br><span class="line"><span class="comment">//-移除 PTE 时，设置 TLB 无效。</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">page_remove(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">void</span> *va)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">pde_t</span> *pte;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">pp</span> =</span> page_lookup(pgdir, va, &amp;pte);</span><br><span class="line">    <span class="keyword">if</span> ((*pte &amp; PTE_P) &amp;&amp; pp) &#123;</span><br><span class="line">page_decref(pp);</span><br><span class="line">*pte = <span class="number">0</span>;</span><br><span class="line">tlb_invalidate(pgdir, va);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="page-insert"><a href="#page-insert" class="headerlink" title="page_insert()"></a>page_insert()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现物理页 &#x27;pp&#x27; 到虚拟地址 &#x27;va&#x27; 的映射。</span></span><br><span class="line"><span class="comment">//页表条目的权限为设置为 &#x27;perm|PTE_P&#x27;。</span></span><br><span class="line"><span class="comment">//要求：</span></span><br><span class="line"><span class="comment">//-如果 &#x27;va&#x27; 处已经有页面映射，应当被 page_remove;</span></span><br><span class="line"><span class="comment">//-必要的话，应当分配页表并插入到 &#x27;pgdir&#x27;;</span></span><br><span class="line"><span class="comment">//-如果插入成功，pp-&gt;pp_ref 应当递增；</span></span><br><span class="line"><span class="comment">//-如果页面以前存在于 &#x27;va&#x27; 中， 则 TLB 必须失效。</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">page_insert(<span class="keyword">pde_t</span> *pgdir, struct PageInfo *pp, <span class="keyword">void</span> *va, <span class="keyword">int</span> perm)&#123;</span><br><span class="line"><span class="keyword">pte_t</span> *pte = pgdir_walk(pgdir, va, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!pte) &#123;</span><br><span class="line"><span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line">&#125;</span><br><span class="line">pp-&gt;pp_ref++;</span><br><span class="line"><span class="keyword">if</span> (*pte &amp; PTE_P) &#123;</span><br><span class="line">page_remove(pgdir, va);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">*pte = page2pa(pp) | perm | PTE_P;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Part-3-Kernel-Address-Space"><a href="#Part-3-Kernel-Address-Space" class="headerlink" title="Part 3: Kernel Address Space"></a>Part 3: Kernel Address Space</h2><p>JOS 将处理器的 32 位线性地址空间分为两部分。我们将在 lab 3 中开始加载和运行的用户环境（进程）将控制下半部分的布局和内容，而内核始终保持对上半部分的完全控制。分隔线由 inc/memlayout.h 中的符号 ULIM 任意定义，为内核保留大约 256MB 的虚拟地址空间。这解释了为什么我们需要在 lab 1 中给内核提供如此高的链接地址：否则内核的虚拟地址空间中没有足够的空间同时在内核下面的用户环境中映射。对于此部分和以后的 lab，在 inc/memlayout.h 中引用 JOS 内存布局图会很有帮助。</p><h3 id="Permissions-and-Fault-Isolation"><a href="#Permissions-and-Fault-Isolation" class="headerlink" title="Permissions and Fault Isolation"></a>Permissions and Fault Isolation</h3><p>由于内核和用户内存都存在于每个环境的地址空间中，因此我们必须使用 x86 页表中的权限位，以允许用户代码仅访问地址空间的用户部分。否则，用户代码中的 Bug 可能会覆盖内核数据，导致崩溃或更细微的故障；用户代码也可能窃取其他环境的私有数据。请注意，可写权限位（PTE_W）同时影响用户和内核代码！</p><p>用户环境将没有权限访问 ULIM 以上的任何内存，而内核将能够读取和写入此内存。对于地址范围 [UTOP，ULIM），内核和用户环境具有相同的权限：它们可以读取但无法写入此地址范围。此地址范围用于向用户环境公开某些只读的内核数据结构。最后，UTOP 下面的地址空间供用户环境使用；用户环境将设置访问此内存的权限。</p><h3 id="Initializing-the-Kernal-Address-Space"><a href="#Initializing-the-Kernal-Address-Space" class="headerlink" title="Initializing the Kernal Address Space"></a>Initializing the Kernal Address Space</h3><p>现在，您将设置 UTOP 上方的地址空间：地址空间的内核部分。inc/memlayout.h 显示了您应该使用的布局。您将使用刚刚写的函数来设置适当的线性地址到物理地址的映射。</p><h4 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5."></a>Exercise 5.</h4><blockquote><p>补全 mem_init() 中缺失的代码。使 <code>check_kern_pgdir()</code> 和 <code>check_page_installed_pgdir()</code> 通过。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">men_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    check_page();</span><br><span class="line">    <span class="comment">// 现在设置虚拟内存</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在线性地址 UPAGES 上映射用户只读的 &#x27;pages&#x27;。</span></span><br><span class="line">    <span class="comment">// 权限：</span></span><br><span class="line">    <span class="comment">//  -UPAGES 的新映像 --kernel R, user R</span></span><br><span class="line">    <span class="comment">//     (ie. perm = PTE_U|PTE_P)</span></span><br><span class="line">    <span class="comment">//  -pages 本身 --kernel RW, user NONE</span></span><br><span class="line">    <span class="comment">// Your code goes here:</span></span><br><span class="line">    boot_map_region(kern_pgdir, UPAGES, PTSIZE, </span><br><span class="line">                    PADDR(pages), PTE_W);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 &#x27;bootstack&#x27; 指向的物理内存作为内核栈。内核栈从虚拟</span></span><br><span class="line">    <span class="comment">// 地址 KSTACKTOP 处向下扩展。我们认为从 </span></span><br><span class="line">    <span class="comment">// [KSTACKTOP-PTSIZE，KSTACKTOP）的整个范围是内核堆栈，但</span></span><br><span class="line">    <span class="comment">// 将它分成两部分：</span></span><br><span class="line">    <span class="comment">//  *[KSTACKTOP-KSTKSIZE, KSTACKTOP) --由物理内存备份</span></span><br><span class="line">    <span class="comment">//  *[KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) --不备份;</span></span><br><span class="line">    <span class="comment">//   因此，如果内核溢出其堆栈，它将故障而不是覆盖内存。称为&quot;保</span></span><br><span class="line">    <span class="comment">//   护页&quot;。</span></span><br><span class="line">    <span class="comment">//  Permissions: kernel RW, user NONE</span></span><br><span class="line">    <span class="comment">// Your code goes here:</span></span><br><span class="line">    </span><br><span class="line">    boot_map_region(kern_pgdir, KSTACKTOP - KSTKSIZE, </span><br><span class="line">                    KSTKSIZE, PADDR(bootstack), PTE_U);</span><br><span class="line">    <span class="comment">// 映射 KERNBASE 处的所有物理内存。</span></span><br><span class="line">    <span class="comment">// 即：[KERNBASE, 2^32) 之间的 VA 应当映射到 [0, 2^32 - </span></span><br><span class="line">    <span class="comment">// KERNBASE) 之间的 PA。</span></span><br><span class="line">    <span class="comment">// 我们可能没有 2^32 - KERNBASE 字节的物理内存，但我们还是只</span></span><br><span class="line">    <span class="comment">// 设置了映射。</span></span><br><span class="line">    <span class="comment">// Permissions: kernel RW, user NONE</span></span><br><span class="line"><span class="comment">// Your code goes here:</span></span><br><span class="line">    boot_map_region(kern_pgdir, KERNBASE, - KERNBASE, <span class="number">0</span>, </span><br><span class="line">                    PTE_W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h4><ol start="2"><li><p>此时页目录中的哪些条目（行）已填写？它们映射哪些地址，它们指向哪里？换句话说，请尽可能多地填写此表：</p><table><thead><tr><th align="center">entry</th><th>base Va</th><th>Points to (logically):</th></tr></thead><tbody><tr><td align="center">1023</td><td></td><td>Page table for top 4MB of phys memory</td></tr><tr><td align="center">1022</td><td></td><td></td></tr><tr><td align="center">…</td><td></td><td></td></tr><tr><td align="center">…</td><td></td><td></td></tr><tr><td align="center">2</td><td>0x00800000</td><td></td></tr><tr><td align="center">1</td><td>0x00400000</td><td></td></tr><tr><td align="center">0</td><td>0x00000000</td><td></td></tr></tbody></table></li><li><p>我们已将内核和用户环境放在同一个地址空间中。为什么用户程序不能读取或写入内核的内存？哪些特定机制保护内核内存？</p><blockquote><p>如果应用程序能够读取写入内核的内存，那么内核的安全性将无法保证。</p><p>内核内存的页表项的 perm 的  PTE_U 位未设置，那么应用程序访问这些内存时将会因为权限不够而报错。</p></blockquote></li><li><p>此操作系统可以支持的最大物理内存量是多少？为什么？</p><blockquote><p>1024 * 1024 * 4096 B = 4 GB</p></blockquote></li><li><p>如果我们实际上拥有最大的物理内存，管理内存的空间开销有多少？这个开销是怎么分解的？</p><blockquote><p>管理内存的开销 为 页目录  + 页表  +  的开销</p><p>页目录： 1024 * 4 B＝ 4096 B = 4 KB</p><p>页表： 1024 * 1024 * 4 B = 4 MB </p><p>PagesInfo Struct ： （4B + 2B）* 1024* 1024 = 6 MB</p></blockquote></li><li><p>重新查看 <code>kern/entry.S</code> 和 <code>kern/entrypgdir.c</code> 中的页表设置。开启分页后，EIP 仍然是一个较低的数字（超过 1MB）。在哪里转换到 KERNBASE 以上的 EIP 运行？从启用分页和开始在 KERNBASE 以上的 EIP 上运行之间，如何才能继续以低 EIP 执行？为什么这种过渡是必要的？</p></li></ol><h4 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h4><p>我们使用许多物理页来保存 KERNBASE 映射的页表。使用页目录条目中的 PTE_PS（”Page Size”）位，进行更节省空间的工作。原始 80386 不支持此位，但最近的 x86 处理器支持。因此，您必须参考 <a href="../../readings/ia32/IA32-3A.pdf">Volume 3 of the current Intel manuals</a>。请确保将内核设计为仅在支持该优化的处理器上使用此优化！</p><p>扩展 JOS 内核监视器的命令：</p><ul><li>以有用且易于阅读的格式显示应用于当前活动地址空间中特定范围的虚拟/线性地址的所有物理页面映射（或缺少这些映射）。例如，您可以输入 ‘showmappings 0x3000 0x5000’ 以显示应用于虚拟地址 0x3000、0x4000 和 0x5000 的页面的物理页面映射和相应的权限位。</li><li>显式设置、清除或更改当前地址空间中任何映射的权限。</li><li>转储给定虚拟或物理地址范围的内存范围的内容。当范围跨页面边界扩展时，请确保转储代码行为正确！</li><li>实现您认为以后对调试内核可能有用的其他操作。</li></ul><h3 id="Address-Space-Layout-Alternatives"><a href="#Address-Space-Layout-Alternatives" class="headerlink" title="Address Space Layout Alternatives"></a>Address Space Layout Alternatives</h3><p>我们在 JOS 中使用的地址空间布局并并非唯一可能。操作系统可能会在低线性地址映射内核，同时将线性地址的上部留给用户进程。但是，x86 内核通常不采用此方法，因为 x86 的向后兼容性模式之一（称为虚拟 8086 模式）在处理器中是”硬连线”，使用线性地址空间的底部，因此如果内核映射在那里，则根本无法使用。</p><p>那是可能的（尽管困难的多），设计内核时，不必为自己的固定部分保留处理器任何线性或虚拟地址空间，而是有效地允许用户级进程不受限制地使用整个 4GB 的虚拟地址空间 - 同时仍然完全保护内核免受这些进程的影响，并保护不同的进程免受彼此的影响！</p><h4 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge"></a>Challenge</h4><p>1.每个用户级环境映射内核。更改 JOS，以便内核有自己的页表，并且用户级环境运行时映射的内核页数最少。也就是说，每个用户级环境映射的页面都仅仅满足用户级环境可以正确进入和离开内核。您还必须为内核制定一个计划，以读取/写入系统调用的参数。</p><p>2.编写设计 内核如何允许用户环境不受限制地使用完整的 4GB 虚拟和线性地址空间的大纲。</p><ul><li>提示：首先完成上一个挑战练习，这将内核减少为用户环境中的一些映射。</li><li>提示：该技术有时称为 ‘<em>follow the bouncing kernel</em>‘。</li></ul><p>在设计中，请务必确切地解决处理器在内核和用户模式之间转换时必须发生哪些操作，以及内核如何完成此类转换。还要描述内核如何访问此方案中的物理内存和 I/O 设备，以及内核在系统调用等期间如何访问用户环境的虚拟地址空间。最后，从灵活性、性能、内核复杂性和您想到的其他因素的角度思考并描述这种方案的优缺点。</p><p>3.由于我们的JOS内核的内存管理系统只分配和释放页面粒度上的内存，因此我们没有任何可以在内核内使用的与通用 malloc/free 相媲美的设施。如果我们想要支持某些类型的 I/O 设备，这些设备需要大于 4KB 的物理连续缓冲区，或者我们希望用户级环境（而不仅仅是内核）能够分配和映射 4MB 超页面以最大限度地提高处理器效率，则这可能是个问题（查看早期有关 “PTE_P” 的挑战问题）。</p><p>将内核的内存分配系统概括为支持从 4KB 到您选择的合理最大值的各种双电源分配单元大小的页面。请确保有一定的方法按需将较大的分配单位划分为较小的分配单位，并在可能的情况下将多个小型分配单位并入更大的分配单位。思考这样一个系统中可能出现的问题。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;为操作系统编写内存管理代码。内存管理包含两个组件。&lt;/p&gt;
&lt;p&gt;第一个组件是内核的 &lt;em&gt;物理内存分配器&lt;/em&gt;，以便内核可以分配和释放内存。分配器以 4096 字节为单位操作，称为 &lt;em&gt;pages&lt;/em&gt;。任务是维护数据结构，该数据结构记录哪些物理页是空闲的，哪些已分配的，以及有多少个进程共享每个分配的页。还将编写例程来分配和释放内存页面。&lt;/p&gt;
&lt;p&gt;内存管理的第二个组件是 &lt;em&gt;虚拟内存&lt;/em&gt;，它将内核和用户软件使用的虚拟地址映射到物理内存中的地址。当指令使用内存时，x86 硬件的内存管理单元（MMU）执行映射。根据提供的规范修改 JOS 以设置 MMU 的页表。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://evil-must.github.io/2020/12/01/hello-world/"/>
    <id>http://evil-must.github.io/2020/12/01/hello-world/</id>
    <published>2020-12-01T10:39:29.335Z</published>
    <updated>2020-12-02T03:36:18.339Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
